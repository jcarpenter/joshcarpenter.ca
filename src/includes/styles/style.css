/* ==========================================================================
   Variables
   ========================================================================== */
:root {
        
    /* -------------- Type sizes -------------- */

    --baseFontSize: 16px;
    --baseLineHeight: 1.625rem; /* 26px */
    
    --font-size-scale: 1.125;
    --font-size-lg-8:   calc(var(--font-size-lg-7) * var(--font-size-scale));
    --font-size-lg-7:   calc(var(--font-size-lg-6) * var(--font-size-scale));
    --font-size-lg-6:   calc(var(--font-size-lg-5) * var(--font-size-scale));
    --font-size-lg-5:   calc(var(--font-size-lg-4) * var(--font-size-scale));
    --font-size-lg-4:   calc(var(--font-size-lg-3) * var(--font-size-scale));
    --font-size-lg-3:   calc(var(--font-size-lg-2) * var(--font-size-scale));
    --font-size-lg-2:   calc(var(--font-size-lg-1) * var(--font-size-scale));
    --font-size-lg-1:   calc(var(--font-size-base) * var(--font-size-scale));
    --font-size-base:   1rem;
    --font-size-sml-1:  calc(var(--font-size-base) / var(--font-size-scale));
    --font-size-sml-2:  calc(var(--font-size-sml-1) / var(--font-size-scale));

    /* -------------- Grid building blocks -------------- */
    
    --grid: var(--baseLineHeight);
    --grid-2: calc(var(--grid) * 2);
    --grid-3: calc(var(--grid) * 3);
    --grid-4: calc(var(--grid) * 4);
    --grid-5: calc(var(--grid) * 5);
    --grid-6: calc(var(--grid) * 6);
    --grid-7: calc(var(--grid) * 7);
    --grid-8: calc(var(--grid) * 8);
    --grid-10: calc(var(--grid) * 10);
    --grid-12: calc(var(--grid) * 12);
    --grid-16: calc(var(--grid) * 16);
    --grid-24: calc(var(--grid) * 24);
    --grid-32: calc(var(--grid) * 32);
    --grid-subdivision-1: calc(var(--grid) * 0.25);
    --grid-subdivision-2: calc(var(--grid) * 0.5);
    --grid-subdivision-3: calc(var(--grid) * 0.75);
    
    /* -------------- Grid layouts -------------- */

    --grid-narrow:  
        minmax(var(--grid-subdivision-3), 1fr) [content-start] minmax(calc(var(--grid) * 10), calc(var(--grid) * 22)) [content-end] minmax(var(--grid-subdivision-3), 1fr);

    --grid-wide:  
        [nav-start] minmax(calc(var(--grid) * 14), 1fr) [nav-end content-start] minmax(calc(var(--grid) * 20), calc(var(--grid) * 22)) [content-end] 1fr;


    /* --grid-layout-content:  
        [full-start] 
            minmax(0, 1fr)
            [left-start] 
                minmax(var(--grid-8), var(--grid-10)) 
            [left-end] 
            var(--grid-2)
            [main-start]
                minmax(calc(var(--grid) * 20), calc(var(--grid) * 22)) 
            [main-end] 
            var(--grid-2)
            [right-start]
                minmax(var(--grid-8), var(--grid-10)) 
            [right-end] 
            minmax(0, 1fr) 
        [full-end]; */
    
    /* -------------- Blocks -------------- */
    
    --block-margin-top: 0;
    --block-margin-bottom: var(--grid);
}


/* ==========================================================================
   Grid
   ========================================================================== */

body {
    /* width: 100%; */
    overflow-x: hidden;
    display: grid;
    position: relative;
    grid-template-columns: var(--grid-narrow);
    grid-auto-flow: row;
    grid-auto-rows: min-content;
}

@media (min-width: 900px) {
    body { 
        grid-template-columns: var(--grid-wide); 
    }
}

body > header { 
    display: none;
}

@media (min-width: 900px) {
    body > header { 
        display: initial;
        grid-column: nav;
    }
}

main {
    grid-column: content;
}



/* ==========================================================================
   Vertical rhythm
   ========================================================================== */

* { 
    box-sizing: border-box; 
    word-break: normal; 
}

html {
    font-size: var(--baseFontSize);
    line-height: var(--baseLineHeight);
}

body {
    margin: 0;
    background: hsl(0, 0%, 98%);
}

blockquote, ol, p, ul {
    margin-top: 0;
    margin-bottom: var(--block-margin-bottom);
}

/* Note: I have to use padding instead of margin to add space to bottom of tables, because of Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1492315. It causes margin values to apply to table cels (instead of the table element), if the table is a child of display: grid. Using padding in turn means I have to apply background color, border-radius (etc) to cels, instead of the table itself. */
table {
    margin: 0;
    padding-bottom: var(--block-margin-bottom);
}

:root {
    --h1-margin-bottom: var(--grid);
    --h2-margin-top: calc(var(--grid) + var(--grid-subdivision-2));
    --h2-margin-bottom: var(--grid);    
    --h3-margin-top: 0;
    --h3-margin-bottom: var(--grid);
}

h1 {
    font-size: var(--font-size-lg-8);
    line-height: var(--grid-2);
    margin-top: var(--grid-2);
    margin-bottom: var(--h1-margin-bottom);
}

h2 {
    font-size: var(--font-size-lg-3);
    line-height: var(--grid);
    margin-top: var(--h2-margin-top);
    margin-bottom: var(--h2-margin-bottom);
}

h3 {
    font-size: var(--font-size-base);
    line-height: var(--grid);
    margin-top: 0;
    margin-bottom: var(--h3-margin-bottom);
}

/* Reduce top-margin of headers that follow blocks to help ensure consistent vertical rhythm. */
@media (min-width: 480px) {

    h2{
        font-size: var(--font-size-lg-1);
    }

    header + h2, blockquote + h2, ol + h2, p + h2, pre + h2, table + h2, ul + h2 {
        margin-top: calc(var(--h2-margin-top) - var(--block-margin-bottom));
    }
}

/* We have to add !important to pre styles to prevent Prism.js themes from overriding */
pre {
    margin-top: 0 !important;
    margin-bottom: var(--block-margin-bottom) !important;
}

/* Stop child lists from having full breaks */
li > ol, li > ul {
    margin: 0;
}

/* horizontal rule */
hr {
    width: 100%;
    height: var(--grid-subdivision-1);
}


/* ==========================================================================
   Navigation
   ========================================================================== */

/* -------------- Header -------------- */

body > header {
    position: absolute;
    top: calc(var(--grid-2) + var(--grid-subdivision-1));
    left: var(--grid-2);
    width: var(--grid-8);
    z-index: 100;
    font-size: var(--font-size-sml-1);
}

body > header h1 {
    font-size: var(--font-size-lg-2);
    line-height: var(--baseLineHeight);
    margin: 0 0 var(--grid) 0;
}

body > header ul {
    list-style: none;
    /* display: flex; */
    margin: 0;
    padding: 0;
    /* flex: 2; */
}

body > header address {
    margin: var(--block-margin-top) 0 var(--block-margin-bottom) 0;
    font-style: normal;
}


/* ==========================================================================
   Headers
   ========================================================================== */

h1, h2, h3 {
    font-kerning: normal;
}

h1 {
    color: var(--clr-gray-darkest);
    font-weight: bold;
    letter-spacing: -0.01em;
}

h2 {
    color: var(--clr-gray-darker);
    font-weight: bold;

}

h3 {
    color: var(--clr-gray-dark);
    font-weight: bold;
}

/* On wider screens, show hashes on h2 */
@media(min-width: 480px) {

    h2::before {
        position: absolute;
        text-align: right;
        padding-right: 1ch;
        box-sizing: border-box;
        margin-left: -6ch;
        width: 6ch;
        color: var(--clr-gray-light);
        font-style: normal;
        content: "##";
    }
}

/* On hover devices, show header anchor links */
@media(hover) {

    .header-anchor {
        left: 0.1em;
        visibility: hidden;
        opacity: 0.3;
        position: relative;
        top: 0.2em;
    }
    
    .header-anchor:hover {
        opacity: 0.6;
    }
    
    h2:hover .header-anchor, h3:hover .header-anchor {
        visibility: visible;
    }
}

/* On devices without hover, hide anchor links */
@media(hover:none) {
    .header-anchor {
        display: none;
    }
}



/* ==========================================================================
   Text styles
   ========================================================================== */

body {
    font-family: 'Public Sans', sans-serif;
    color: var(--clr-gray-dark);
}

a {
    color: inherit;
    font-weight: 500;
}

a:hover {
    color: var(--clr-gray-darkest);
}

a:active {
    background-color: rgba(0, 0, 0, 0.15);
}

/* -------------- Address and Date -------------- */

article > header address {
    font-style: normal;
    display: none;
}

article > header time {
    font-variant: small-caps;
    font-size: var(--font-size-sml-1);
    letter-spacing: 0.05em;
    text-transform: uppercase;
    color: var(--clr-gray);
}

/* -------------- Lists  -------------- */
/* TODO: Am currently aligning list markers flush with left side using magic numbers.  */
/* Alternatively I could properly style my one, per: https://css-tricks.com/style-list-markers-css/  */

/* Make list markers flush with body text, by default */
ul {
    padding-left: 1em;
}

ol {
    padding-left: var(--grid-subdivision-3);
}

/* Shrink numerical marker slightly. It's optically a bit too large at default 1em. */
ol li::marker {
    font-size: 0.95em;
}

/* Add more indentation on larger screens */
@media(min-width: 480px) {
    ul, ol {
        padding-left: calc(var(--grid) + var(--grid-subdivision-1));
    }
}
    

/* -------------- Images & Media -------------- */

/* Use relative sizes to prevent overflowing containers.  */

img, embed, object, video {
    max-width: 100%;    
}

/* -------------- Pre & Code -------------- */

/* We have to add !important to pre styles to prevent Prism.js themes from overriding */
pre {
    border: none !important;
    border-radius: 0.2em;
    border: 1px solid var(--clr-gray-lighter) !important;
    background-color: var(--clr-gray-lightestx2) !important;
}

pre code {
    white-space: pre-wrap !important;
}

code {
    background-color: rgba(0, 0, 0, 0) !important;
}

/* -------------- Figure and Img -------------- */

/* TODO: Add margin-bottom to figure when they're displayed inline */

article > figure {
    /* grid-column: right; */
    /* align-self: end; */
    /* justify-self: end; */
    /* overflow: visible; */
    /* height: 0em; */
}

figure {
    margin: 0;
    position: relative;
}

figure img {
    box-shadow: 0px 1px 30px -14px rgba(0, 0, 0, 0.3);
    object-fit: cover;
    max-width: 100%;
    /* display: block; */
    box-sizing: content-box;
}

/* 
Note: The line-height here breaks vertical rhythm. It _should_ 
use a --grid or --grid-subdivision, but the leading for the 
former is too large, and the later too tight. 
*/

figcaption {
    /* padding: var(--grid-subdivision-2); */
    /* background: rgba(0, 0, 0, 0.05); */
    margin-top: var(--grid-subdivision-2);
    /* font-style: italic; */
    color: gray;
    font-size: var(--font-size-sml-1);
    line-height: var(--grid-subdivision-3);
    /* line-height: var(--grid); */
    letter-spacing: 0.02em;
    /* line-height: calc(var(--font-size-sml-1) * 1.5);  */
}

/* -------------- Block quote -------------- */

/* Shifted margin is to make room on side for ::before notch (see below). */

blockquote {
    margin-left: 1em;
    margin-right: 0;
}

blockquote p {
    letter-spacing: 0.01em;
    font-style: italic;
    color: var(--clr-blue);
    padding-top: 0;
    margin-top: 0;
}

/* Remove bottom margin from last paragraph inside blockqoute, or their margins combine and give us more than we want, breaking consistent vertical spacing. */
blockquote p:last-of-type {
    margin-bottom: 0;
}

blockquote::before {
    content: ">";
    font-weight: normal;
    font-style: normal;
    position: absolute;
    text-align: right;
    padding-right: 1em;
    box-sizing: border-box;
    margin: 0 0 0 -1em;
    width: 1em;
    color: var(--clr-blue-light)
}

@media(min-width: 480px) {
    blockquote {
        margin-left: var(--grid);
        margin-right: 1em;
    }
}

/* -------------- Strong, Emphasis, Small caps  -------------- */

strong {
    font-weight: 700;
    /* background-color: var(--clr-highlight); */
    /* border-color: var(--clr-highlight); */
    /* border-style: solid; */
    /* border-width: 0.1em; */
    /* margin: -0.05em; */
}

.smallcaps {
    font-variant: small-caps;
}

/* -------------- Hanging punctuation -------------- */

/* This class gets applied manually in the build process if the first character is a quote. */
.hanging-punctuation {
    text-indent: -0.4em;
}

/* Prevent children indenting by reseting to zero */
.hanging-punctuation * {
    text-indent: 0;
}

/* -------------- Sub and Sup -------------- */
/* 
Prevent sup and sub elements from altering line height of parent text.
Adapted from: https://gist.github.com/unruthless/413930
*/

sub, sup {
    /* Specified in % so that the sup/sup is the
       right size relative to the surrounding text */
    font-size: 75%;
    /* Zero out the line-height so that it doesn't
       interfere with the positioning that follows */
    line-height: 0;
    /* Where the magic happens: makes all browsers position
       the sup/sup properly, relative to the surrounding text */
    position: relative;
    /* Note that if you're using Eric Meyer's reset.css, this
       is already set and you can remove this rule */
    vertical-align: baseline;
}

sup {
    /* Move the superscripted text up */
    top: -0.5em;
}

sub {
    /* Move the subscripted text down, but only
       half as far down as the superscript moved up */
    bottom: -0.25em;
}


/* ==========================================================================
   TABLES
   ========================================================================== */

/* Note: I have to use padding instead of margin to add space to bottom of tables, because of Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1492315. It causes margin values to apply to table cels (instead of the table element), if the table is a child of display: grid. Using padding in turn means I have to apply background color, border-radius (etc) to cels, instead of the table itself. */

/* -------------- Layout -------------- */

table {
    
    /* Variables */
    --tableBorderRadius: 0.2rem;
    --tableBorderColor: var(--clr-gray-lighter);
    --tableBackgroundColor: var(--clr-gray-lightestx2);

    border-spacing: 0;
    text-align: left;
    font-size: var(--font-size-sml-1);
}

table th, table td {
    padding: var(--grid-subdivision-1);
    margin: 0;
}

/* -------------- Typography -------------- */

table th {
    font-size: var(--font-size-sml-1);
}

/* -------------- Background color -------------- */

/* Header */
table th {
    background: var(--tableBackgroundColor);
}

/* Alternating row colors */
/* table tr:nth-child(2n) td {
    background: var(--tableBackgroundColor);
} */

/* -------------- Borders -------------- */

/* Border: top of each row */
table th, table td {   
    border-top: 1px solid var(--tableBorderColor);
}

/* Border: left side */
th:first-of-type, td:first-of-type {
    border-left: 1px solid var(--tableBorderColor);
}

/* Border: right side */
th:last-of-type, td:last-of-type {
    border-right: 1px solid var(--tableBorderColor);
}

/* Border: bottom */
table tr:last-of-type td {
    border-bottom: 1px solid var(--tableBorderColor);
}

/* -------------- Round corners -------------- */
/* Note: Normally would apply to table element, but can't, because that won't work with padding. */

/* Top left */
table th:first-of-type {
    border-top-left-radius: var(--tableBorderRadius);
}

/* Top right */
table th:last-of-type {
    border-top-right-radius: var(--tableBorderRadius);
}

/* Bottom left */
table tr:last-of-type td:first-of-type {
    border-bottom-left-radius: var(--tableBorderRadius);
}

/* Bottom right */
table tr:last-of-type td:last-of-type {
    border-bottom-right-radius: var(--tableBorderRadius);
}


/* ==========================================================================
   REFERENCES
   ========================================================================== */

#references {
    line-height: 1.63rem;
    margin: var(--grid-2) 0;
    border-top: var(--grid-subdivision-1) solid var(--clr-gray-light);
}

#references h2 {
    margin-top: var(--grid);
}

#references h2::before {
    content: none;
}

#references ul {
    margin: 0;
    padding: 0;
    font-size: var(--font-size-sml-1);
    line-height: var(--grid-subdivision-3);
    list-style: none;
    /* Split contents into two equal columns */
    column-count: 1;
    column-gap: var(--grid-2);
}

.reference {
    margin-bottom: var(--grid-subdivision-3);
    /*Do not let contents be broken across columns */
    break-inside: avoid;
}

.reference p {
    color: var(--clr-gray);
    font-style: normal;
    margin: 0;
    padding: 0;
    font-weight: normal;
}

.reference a {
    font-weight: normal;
    text-decoration: underline;
    border: none;
    color: var(--clr-gray);
}

.reference a:hover {
    border: none;
    color: var(--clr-gray-dark); 
}

@media (min-width: 480px) {
    #references ul {
        column-count: 2;
    }
}


/* ==========================================================================
   FOOTER
   ========================================================================== */

/* Footer contains copyright info */

article > footer {
    grid-column: main;
    margin-top: var(--grid-2);
    padding: var(--grid) 0;
    border-top: var(--grid-subdivision-1) solid var(--clr-gray-light);
    font-size: var(--txt-size-small);
    color: var(--clr-gray);
}
