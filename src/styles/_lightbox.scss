@use "mixins-and-functions" as *;


/* 
========================================================
LIGHTBOX
========================================================
*/


/* -------------- Thumbs -------------- */

[data-lightbox] {
  @include outline-on-focus;
	transition: color 0.15s, text-decoration-color 0.15s;

  display: block;
  position: relative;
  overflow: hidden;
  border-radius: 0;
  // border-radius: 0.2rem;

  &:hover {
    cursor: pointer;
  }
 
  // &::before {
  //   content: '';
  //   top: 0;
  //   left: 0;
  //   width: 100%;
  //   height: 100%;
  //   position: absolute;
  //   z-index: 2;
  //   transition: box-shadow 0.25s;
  // }
  
  // &:hover::before {
  //   box-shadow: inset 0 0 0 0.35rem accent(1);
  // }
}

/* -------------- Placeholders -------------- */

.lightbox-placeholder {
  // display: none;
  background: pink;
  // min-height: 2rem;
  // width: 100%;
}

/* -------------- Transition -------------- */

// We're just defining visibility transition delays here. `visibility:hidden` is set by a top-level `[aria-hidden="true"]` selector. When aria-hidden=true, we delay visibility long enough for opacity tweens to finish.

#lightbox[aria-hidden="true"] {
  // transition: visibility var(--lightboxFadeOutDuration);
}

// When aria-hidden != true, we flip visibility immediately, so opacity tweens can start.
#lightbox {
  // transition: visibility 0s;
}


/* -------------- Controls -------------- */

#lightbox > button {
  display: flex;
  align-items: center;
  background-color: transparent;
  cursor: pointer;
  margin: 0;
  opacity: 0.4;
  pointer-events: initial;
  position: fixed;
  border-radius: 0.2rem;
  z-index: 12;
  opacity: 0.5;
  
  @include outline-on-focus;
	transition: color 0.15s, text-decoration-color 0.15s;

  // &:focus-visible {
  //     @include outline-thin;
  //     outline-color: rgba(var(--lightboxForegroundColor), 0.7);
  // }

  &:disabled {
    cursor: initial;
    opacity: 0.08;
  }

  &:enabled:hover {
      opacity: 1;
  }

  &[aria-disabled="true"] {
      opacity: 0.15;
      pointer-events: none;
  }

  img {
      width: 2rem;
      height: 2rem;
  }
}

#lightbox {

  #prev,
  #next,
  #close {
      top: 1rem;
  }

  #close {
      left: 1rem;
  }

  #prev {
      right: 3rem;
  }

  #next {
      right: 1rem;
      transform: rotateZ(180deg)  ;
  }
}


/* -------------- Media & Captions -------------- */

#lightbox ul {
  list-style: none;
  margin: 0;
  padding: 0;

  width: 100%;
  display: flex;
  overflow: auto;
  flex: none;
  flex-flow: row nowrap;

  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;

  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  
  z-index: 11;

  &:focus {
    outline: none;
  }
  
}

#lightbox li {
  // background-color: rgba(140, 20, 20, 0.5);
  // border: 1px solid white;
  
  width: 100vw;
  flex: none;
  font-size: 20rem;
  color: white;
  // Create gap between items.
  // It will not be visible when at rest.
  margin: 0 2rem; 
  padding: 1rem 0;
  overflow: hidden;
  scroll-snap-align: center;
  // Disallow free scrolling. Always increment by one stop.
  scroll-snap-stop: always;

  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  
  &::before {
    content: initial;
  }
  
  &.loaded {
    // transition: opacity 0.3s ease-in-out;
    opacity: 1;
  }
  
  &:not(.loaded) {
    // transition: opacity 0.1s ease-in;
    opacity: 0.2;
  }

  @media (min-width: 480px) {
    padding: 6rem 2rem 3rem;
  }

  @media (min-width: 1000px) {
    padding: 6rem 6rem 3rem;
  }
}


#lightbox div.container {

  width: 100%;
  height: 100%;
  max-width: 160rem;
  max-width: 110rem;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  
  // > * {
  //   box-shadow: 0 0 10px red;
  // }

  > img, video, iframe {
    flex: 1 1 auto;
    width: auto;
    max-width: 100%;
    height: auto;
    max-height: 100%;
    // object-fit: contain;
    // Need to set this, or else media taller than avaialble 
    // height will not shrink to fit, and figcaption will be
    // pushed off the page. min-height is usually 0 by default,
    // but with flex it's `auto` (is my understanding).
    min-height: 0;
  }

  > img {
    object-fit: contain;
  }

  picture { 
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    width: 100%;

    source, img {
      display: block;
      width: 100%;
      height: auto;
      max-height: 100%;
      object-fit: contain;
    }
  }
}

#lightbox div.caption  {
  flex: none;
  font-size: 1.33rem;
  line-height: 2rem;
  max-width: 64rem;
  padding: 2rem 1rem 0rem;
  color: rgba(var(--lightboxForegroundColor), 0.5);

  @media (min-width: 480px) {
    padding: 2rem 0 0;
  }
}


/* -------------- Background -------------- */

#lightbox[aria-hidden="true"] #background {
  opacity: 0;
  // transition: opacity var(--lightboxFadeOutDuration) ease-in;
}

#lightbox #background {
  background-color: rgba(var(--lightboxBackgroundColor), 1);
  // backdrop-filter: blur(2px);
  // bottom: 0;
  cursor: default;
  position: fixed;
  top: 0;
  left: 0;
  // bottom: 0;
  // right: 0;
  width: 100%;
  height: 100%; 
  z-index: 10;
  opacity: 1;
  // transition: opacity var(--lightboxFadeInDuration) ease-out;
}
